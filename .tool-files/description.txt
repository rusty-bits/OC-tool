ApfsDriverLoader.efi
Needed for seeing APFS volumes.
VboxHfs.efi
Needed for seeing HFS volumes.
VBoxHfs.efi
Needed for seeing HFS volumes.
HfsPlus.efi
Needed for seeing HFS volumes.
HFSPlus.efi
Needed for seeing HFS volumes.
FwRuntimeServices.efi
Replacement for AptioMemoryFix.efi, used for patching boot.efi for NVRAM fixes and better memory management.
VirtualSmc.efi
Used for proper FileVault support, cannot be used with FakeSMC
SSDT-AWAC.aml
This is the 300 series RTC patch, needed for certain Z390 systems.
SSDT-RTC0.aml
Alternative to SSDT-AWAC when not compatible with your system.
SSDT-EC-USBX.aml
Needed to setup USB power and such correctly, prefered option over renaming XHCI. This SSDT is meant for Skylake+ systems, please use SSDT-EC and SSDT-EHCx_OFF for older systems.
SSDT-EC.aml
Needed to setup USB power correctly on pre-skylake systems.
SSDT-EHCx_OFF.aml
Prefered alternative over renaming EHCI for setting up USB correctly on pre-skylake systems.
SSDT-PLUG.aml
Sets PluginType, Clover altrenative would be under Acpi -> GenerateOptions -> PluginType. Do note that this SSDT is made for systems where AppleACPICPU attaches CPU0, though some systems have theirs starting at PR00 so adjust accordingly.
SSDT-SBUS-MCHC.aml
Adds a SMbus device and fixes DeviceProperties injection via _DSM which is found in your DSDT table. Most can ignore.
All
If set to true, all ACPI tables matching the condition will be deleted. Otherwise only first matched table.
Comment
Arbitrary ASCII string used to provide human readable reference for the entry. It is implementation defined whether this value is used.
OemTableId
Match table OEM ID to be equal to this value unless all zero.
TableLength
Match table size to be equal to this value unless 0.
TableSignature
Match table signature to be equal to this value unless all zero.
Count
Number of patch occurrences to apply. 0 applies the patch to all occurrences found.
Find
Data to find. Must equal to Replace in size.
Limit
Maximum number of bytes to search for. Can be set to 0 to look through the whole ACPI table.
Mask
Data bitwise mask used during find comparison. Allows fuzzy search by ignoring not masked (set to zero) bits. Can be set to empty data to be ignored. Must equal to Replace in size otherwise.
OemTableId
Match table OEM ID to be equal to this value unless all zero.
Replace
Replacement data of one or more bytes.
ReplaceMask
Data bitwise mask used during replacement. Allows fuzzy replacement by updating masked (set to non-zero) bits. Can be set to empty data to be ignored. Must equal to Replace in size otherwise.
Skip
Number of found occurrences to be skipped before replacement is done.
TableLength
Match table size to be equal to this value unless 0.
TableSignature
Match table signature to be equal to this value unless all zero.
FadtEnableReset
Provide reset register and flag in FADT table to enable reboot and shutdown. Mainly required on legacy hardware and few laptops. Can also fix power-button shortcuts. Not recommended unless required.
NormalizeHeaders
Cleanup ACPI header fields to workaround macOS ACPI implementation bug causing boot crashes. Reference: Debugging AppleACPIPlatform on 10.13 by Alex James aka theracermaster. The issue is fixed in macOS Mojave (10.14).
RebaseRegions
Attempt to heuristically relocate ACPI memory regions. Not recommended. ACPI tables are often generated dynamically by underlying firmware implementation. Among the position- independent code, ACPI tables may contain physical addresses of MMIO areas used for device configuration, usually grouped in regions (e.g. OperationRegion). Changing firmware settings or hardware configuration, upgrading or patching the firmware inevitably leads to changes in dynamically generated ACPI code, which sometimes lead to the shift of the addresses in aforementioned OperationRegion constructions. For this reason it is very dangerous to apply any kind of modifications to ACPI tables. The most reasonable approach is to make as few as possible changes to ACPI and try to not replace any tables, especially DSDT. When this is not possible, then at least attempt to ensure that custom DSDT is based on the most recent DSDT or remove writes and reads for the affected areas. When nothing else helps this option could be tried to avoid stalls at PCI Configuration Begin phase of macOS booting by attempting to fix the ACPI addresses. It does not do magic, and only works with most common cases. Do not use unless absolutely required.
ResetHwSig
Reset FACS table HardwareSignature value to 0. This works around firmwares that fail to maintain hardware signature across the reboots and cause issues with waking from hibernation.
ResetLogoStatus
Reset BGRT table Displayed status field to false. This works around firmwares that provide BGRT table but fail to handle screen updates afterwards.
Booter
This section allows to apply different kinds of UEFI modifications on Apple bootloader (boot.efi). The modifications currently provide various patches and environment alterations for different firmwares. Some of these features were originally implemented as a part of AptioMemoryFix.efi, which is no longer maintained. See Tips and Tricks section for migration steps.
MmioWhitelist
Designed to be filled with plist dict values, describing addresses critical for particular firmware functioning when DevirtualiseMmio quirk is in use. See MmioWhitelist Properties section below.
Quirks
Apply individual quirks described in Quirks Properties section below.
Address
Exceptional MMIO address, which memory descriptor should be left virtualised (unchanged) by DevirtualiseMmio. This means that the firmware will be able to directly communicate with this memory region during operating system functioning, because the region this value is in will be assigned a virtual address. The addresses written here must be part of the memory map, have EfiMemoryMappedIO type and EFI_MEMORY_RUNTIME attribute (highest bit) set. To find the list of the candidates the debug log can be used.
AvoidRuntimeDefrag
Protect from boot.efi runtime memory defragmentation. This option fixes UEFI runtime services (date, time, NVRAM, power control, etc.) support on many firmwares using SMM backing for select services like variable storage. SMM may try to access physical addresses, but they get moved by boot.efi.
DevirtualiseMmio
Remove runtime attribute from select MMIO regions. This option reduces stolen memory footprint from the memory map by removing runtime bit for known memory regions. This quirk may result in the increase of KASLR slides available, but is not necessarily compatible with the target board without additional measures. In general this frees from 64 to 256 megabytes of memory (present in the debug log), and on some platforms it is the only way to boot macOS, which otherwise fails with allocation error at bootloader stage. This option is generally useful on all firmwares except some very old ones, like Sandy Bridge. On select firmwares it may require a list of exceptional addresses that still need to get their virtual addresses for proper NVRAM and hibernation functioning. Use MmioWhitelist section to do this.
DisableSingleUser
Disable single user mode. This is a security option allowing one to restrict single user mode usage by ignoring CMD+S hotkey and -s boot argument. The behaviour with this quirk enabled is supposed to match T2-based model behaviour. Read this article to understand how to use single user mode with this quirk enabled.
DisableVariableWrite
Protect from macOS NVRAM write access. This is a security option allowing one to restrict NVRAM access in macOS. This quirk requires OC_FIRMWARE_RUNTIME protocol implemented in OpenRuntime.efi. Note: This quirk can also be used as an ugly workaround to buggy UEFI runtime services implementations that fail to write variables to NVRAM and break the rest of the operating system.
DiscardHibernateMap
Reuse original hibernate memory map. This option forces XNU kernel to ignore newly supplied memory map and assume that it did not change after waking from hibernation. This behaviour is required to work by Windows, which mandates to preserve runtime memory size and location after S4 wake. Note: This may be used to workaround buggy memory maps on older hardware, and is now considered rare legacy. Examples of such hardware are Ivy Bridge laptops with Insyde firmware, like Acer V3-571G. Do not use this unless you fully understand the consequences.
EnableSafeModeSlide
Patch bootloader to have KASLR enabled in safe mode. This option is relevant to the users that have issues booting to safe mode (e.g. by holding shift or using -x boot argument). By default safe mode forces 0 slide as if the system was launched with slide=0 boot argument. This quirk tries to patch boot.efi to lift that limitation and let some other value (from 1 to 255) be used. This quirk requires ProvideCustomSlide to be enabled. Note: The necessity of this quirk is determined by safe mode availability. If booting to safe mode fails, this option can be tried to be enabled.
EnableWriteUnprotector
Permit write access to UEFI runtime services code. This option bypasses RX permissions in code pages of UEFI runtime services by removing write protection (WP) bit from CR0 register during their execution. This quirk requires OC_FIRMWARE_RUNTIME protocol implemented in OpenRuntime.efi. Note: This quirk may potentially weaken firmware security, please use RebuildAppleMemoryMap if your firmware supports memory attributes table (MAT).
ForceExitBootServices
Retry ExitBootServices with new memory map on failure. Try to ensure that ExitBootServices call succeeds even with outdated MemoryMap key argument by obtaining current memory map and retrying ExitBootServices call. Note: The necessity of this quirk is determined by early boot crashes of the firmware. Do not use this unless you fully understand the consequences.
ProtectMemoryRegions
Protect memory regions from incorrect access. Some firmwares incorrectly map select memory regions: • CSM region can be marked as boot services code or data, which leaves it as free memory for XNU kernel. • MMIO regions can be marked as reserved memory and stay unmapped, but may be required to be accessible at runtime for NVRAM support. This quirk attempts to fix types of these regions, e.g. ACPI NVS for CSM or MMIO for MMIO. Note: The necessity of this quirk is determined by artifacts, sleep wake issues, and boot failures. In general only very old firmwares need this quirk.
ProtectSecureBoot
Protect UEFI Secure Boot variables from being written. Reports security violation during attempts to write to db, dbx, PK, and KEK variables from the operating system. Note: This quirk mainly attempts to avoid issues with NVRAM implementations with problematic defragmentation, such as select Insyde or MacPro5,1.
ProtectUefiServices
Protect UEFI services from being overridden by the firmware. Some modern firmwares including both hardware and virtual machines, like VMware, may update pointers to UEFI services during driver loading and related actions. Consequentially this directly breaks other quirks that affect memory management, like DevirtualiseMmio, ProtectMemoryRegions, or RebuildAppleMemoryMap, and may also break other quirks depending on the effects of these. Note: On VMware the need for this quirk may be diagnosed by “Your Mac OS guest might run unreliably with more than one virtual core.” message.
ProvideCustomSlide
Provide custom KASLR slide on low memory. This option performs memory map analysis of your firmware and checks whether all slides (from 1 to 255) can be used. As boot.efi generates this value randomly with rdrand or pseudo randomly rdtsc, there is a chance of boot failure when it chooses a conflicting slide. In case potential conflicts exist, this option forces macOS to use a pseudo random value among the available ones. This also ensures that slide= argument is never passed to the operating system for security reasons. Note: The necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message is present, this option is to be enabled.
RebuildAppleMemoryMap
Generate Memory Map compatible with macOS. Apple kernel has several limitations in parsing UEFI memory map: • Memory map size must not exceed 4096 bytes as Apple kernel maps it as a single 4K page. Since some firmwares have very large memory maps (approximately over 100 entries) Apple kernel will crash at boot. • Memory attributes table is ignored. EfiRuntimeServicesCode memory statically gets RX permissions, and all other memory types get RW permissions. Since some firmware drivers may write to global variables at runtime, Apple kernel will crash at calling UEFI runtime services, unless driver .data section has EfiRuntimeServicesData type. To workaround these limitations this quirk applies memory attributes table permissions to memory map passed to Apple kernel and optionally attempts to unify contiguous slots of similar types if the resulting memory map exceeds 4 KB. Note 1: Since many firmwares come with incorrect memory protection table this quirk often comes in pair with SyncRuntimePermissions. Note 2 : The necessity of this quirk is determined by early boot failures. This quirk replaces EnableWriteUnprotector on firmwares supporting memory attributes table (MAT).
SetupVirtualMap
Setup virtual memory at SetVirtualAddresses. Select firmwares access memory by virtual addresses after SetVirtualAddresses call, which results in early boot crashes. This quirk workarounds the problem by performing early boot identity mapping of assigned virtual addresses to physical memory. Note: The necessity of this quirk is determined by early boot failures. Currently new firmwares with memory protection support (like OVMF) do not support this quirk due to acidanthera/bugtracker#719.
SignalAppleOS
Report macOS being loaded through OS Info for any OS. This quirk is useful on Mac firmwares, which behave differently in different OS. For example, it is supposed to enable Intel GPU in Windows and Linux in some dual-GPU MacBook models.
SyncRuntimePermissions
Update memory permissions for runtime environment. Some firmwares either fail to properly handle runtime permissions: • They incorrectly mark OpenRuntime as not executable in the memory map. • They incorrectly mark OpenRuntime as not executable in the memory attributes table. • They lose entries from the memory attributes table after OpenRuntime is loaded. • They mark items in the memory attributes table as read-write-execute. This quirk tries to update memory map and memory attributes table to correct this. Note: The necessity of this quirk is determined by early boot failures either in macOS or in Linux/Windows. In general only firmwares released in 2018 or later are affected.
DeviceProperties
Device configuration is provided to macOS with a dedicated buffer, called EfiDevicePathPropertyDatabase. This buffer is a serialised map of DevicePaths to a map of property names and their values.
Add
Sets device properties from a map (plist dict) of deivce paths to a map (plist dict) of variable names and their values in plist metadata format. Device paths must be provided in canonic string format (e.g. PciRoot(0x0)/Pci(0x1,0x0)/Pci(0x0,0x0)). Properties will only be set if not present and not deleted.
Delete
Removes device properties from a map (plist dict) of deivce paths to an array (plist array) of variable names in plist string format.
Kernel
This section allows to apply different kinds of kernelspace modifications on Apple Kernel (XNU). The modifications currently provide driver (kext) injection, kernel and driver patching, and driver blocking.
Add
Load selected kernel drivers from OC/Kexts directory.
Block
Remove selected kernel drivers from prelinked kernel.
Emulate
Emulate select hardware in kernelspace via parameters described in Emulate Properties section below.
Patch
Perform binary patches in kernel and drivers prior to driver addition and removal.
BundlePath
Kext bundle path (e.g. Lilu.kext or MyKext.kext/Contents/PlugIns/MySubKext.kext).
ExecutablePath
Kext executable path relative to bundle (e.g. Contents/MacOS/Lilu).
MaxKernel
Adds kernel driver on specified macOS version or older.
MinKernel
Adds kernel driver on specified macOS version or newer.
PlistPath
Kext Info.plist path relative to bundle (e.g. Contents/Info.plist).
Identifier
Kext bundle identifier (e.g. com.apple.driver.AppleTyMCEDriver).
MaxKernel
Blocks kernel driver on specified macOS version or older.
MinKernel
Blocks kernel driver on specified macOS version or newer.
Cpuid1Data
Sequence of EAX, EBX, ECX, EDX values to replace CPUID (1) call in XNU kernel.
Cpuid1Mask
Bit mask of active bits in Cpuid1Data. When each Cpuid1Mask bit is set to 0, the original CPU bit is used, otherwise set bits take the value of Cpuid1Data.
Base
Selects symbol-matched base for patch lookup (or immediate replacement) by obtaining the address of provided symbol name. Can be set to empty string to be ignored.
Identifier
Kext bundle identifier (e.g. com.apple.driver.AppleHDA) or kernel for kernel patch.
Limit
Maximum number of bytes to search for. Can be set to 0 to look through the whole kext or kernel.
Mask
Data bitwise mask used during find comparison. Allows fuzzy search by ignoring not masked (set to zero) bits. Can be set to empty data to be ignored. Must equal to Replace in size otherwise.
MaxKernel
Patches data on specified macOS version or older.
MinKernel
Patches data on specified macOS version or newer.
AppleCpuPmCfgLock
Disables PKG_CST_CONFIG_CONTROL (0xE2) MSR modification in AppleIntelCPUPowerManage- ment.kext, commonly causing early kernel panic, when it is locked from writing. Certain firmwares lock PKG_CST_CONFIG_CONTROL MSR register. To check its state one can use bundled VerifyMsrE2 tool. Select firmwares have this register locked on some cores only. As modern firmwares provide CFG Lock setting, which allows configuring PKG_CST_CONFIG_CONTROL MSR register lock, this option should be avoided whenever possible. For several APTIO firmwares not displaying CFG Lock setting in the GUI it is possible to access the option directly:
AppleXcpmCfgLock
Disables PKG_CST_CONFIG_CONTROL (0xE2) MSR modification in XNU kernel, commonly causing early kernel panic, when it is locked from writing (XCPM power management).
AppleXcpmExtraMsrs
Disables multiple MSR access critical for select CPUs, which have no native XCPM support. This is normally used in conjunction with Emulate section on Haswell-E, Broadwell-E, Skylake-SP, and similar CPUs. More details on the XCPM patches are outlined in acidanthera/bugtracker#365. Note: Additional not provided patches will be required for Ivy Bridge or Pentium CPUs. It is recommended to use AppleIntelCpuPowerManagement.kext for the former.
AppleXcpmForceBoost
Forces maximum performance in XCPM mode. This patch writes 0xFF00 to MSR_IA32_PERF_CONTROL (0x199), effectively setting maximum multiplier for all the time. Note: While this may increase the performance, this patch is strongly discouraged on all systems but those explicitly dedicated to scientific or media calculations. In general only certain Xeon models benefit from the patch.
CustomSMBIOSGuid
Performs GUID patching for UpdateSMBIOSMode Custom mode. Usually relevant for Dell laptops.
DisableIoMapper
Disables IOMapper support in XNU (VT-d), which may conflict with the firmware implementation. Note: This option is a preferred alternative to deleting DMAR ACPI table and disabling VT-d in firmware preferences, which does not break VT-d support in other systems in case they need it.
DisableRtcChecksum
Disables primary checksum (0x58-0x59) writing in AppleRTC. Note 1: This option will not protect other areas from being overwritten, see RTCMemoryFixup kernel extension if this is desired. Note 2: This option will not protect areas from being overwritten at firmware stage (e.g. macOS bootloader), see AppleRtc protocol description if this is desired.
DummyPowerManagement
Disables AppleIntelCpuPowerManagement. Note: This option is a preferred alternative to NullCpuPowerManagement.kext for CPUs without native power management driver in macOS.
ExternalDiskIcons
Apply icon type patches to AppleAHCIPort.kext to force internal disk icons for all AHCI disks. Note: This option should be avoided whenever possible. Modern firmwares usually have compatible AHCI controllers.
IncreasePciBarSize
Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GBs. Note: This option should be avoided whenever possible. In general the necessity of this option means misconfigured or broken firmware.
LapicKernelPanic
Disables kernel panic on LAPIC interrupts.
PanicNoKextDump
Prevent kernel from printing kext dump in the panic log preventing from observing panic details. Affects 10.13 and above.
PowerTimeoutKernelPanic
Disables kernel panic on setPowerState timeout. An additional security measure was added to macOS Catalina (10.15) causing kernel panic on power change timeout for Apple drivers. Sometimes it may cause issues on misconfigured hardware, notably digital audio, which sometimes fails to wake up. For debug kernels setpowerstate_panic=0 boot argument should be used, which is otherwise equivalent to this quirk.
ThirdPartyDrives
Apply vendor patches to IOAHCIBlockStorage.kext to enable native features for third-party drives, such as TRIM on SSDs or hibernation support on 10.15 and newer. Note: This option may be avoided on user preference. NVMe SSDs are compatible without the change. For AHCI SSDs on modern macOS version there is a dedicated built-in utility called trimforce. Starting from 10.15 this utility creates EnableTRIM variable in APPLE_BOOT_VARIABLE_GUID namespace with 01 00 00 00 value.
XhciPortLimit
Patch various kexts (AppleUSBXHCI.kext, AppleUSBXHCIPCI.kext, IOUSBHostFamily.kext) to remove USB port count limit of 15 ports. Note: This option should be avoided whenever possible. USB port limit is imposed by the amount of used bits in locationID format and there is no possible way to workaround this without heavy OS modification. The only valid solution is to limit the amount of used ports to 15 (discarding some). More details can be found on AppleLife.ru.
Misc
This section contains miscellaneous configuration affecting OpenCore operating system loading behaviour as well as other entries, which do not go to any other section. OpenCore tries to follow “bless” model also known as “Apple Boot Policy”. The primary specialty of “bless” model is to allow embedding boot options within the file system (and be accessible through a specialised driver) as well as supporting a broader range of predefined boot paths compared to the removable media list found in the UEFI specification. Each partition will only be used for booting when it corresponds to “Scan policy”: a set of restrictions to only use partitions with specific file systems and from specific device types. Scan policy behaviour is discussed in ScanPolicy property description. Scan process starts with obtaining all the partitions filtered with “Scan policy”. Each partition may produce multiple primary and alternate options. Primary options describe operating systems installed on this media. Alternate options describe recovery options for the operating systems on the media. It is possible for alternate options to exist without primary options and vice versa. Be warned that the options may not necessarily describe the operating systems on the same partition. Each primary and alternate option can be an auxiliary option or not, refer to HideAuxiliary for more details.
Boot
Apply boot configuration described in Boot Properties section below.
BlessOverride
Add custom scanning paths through bless model. Designed to be filled with plist string entries containing absolute UEFI paths to customised bootloaders, for example, \EFI\debian\grubx64.efi for Debian bootloader. This allows unusual boot paths to be au- tomaticlly discovered by the boot picker. Designwise they are equivalent to predefined blessed path, such as \System\Library\CoreServices\boot.efi or \EFI\Microsoft\Boot\bootmgfw.efi, but unlike predefined bless paths they have highest priority.
Debug
Apply debug configuration described in Debug Properties section below.
Entries
Add boot entries to boot picker. Designed to be filled with plist dict values, describing each load entry. See Entry Properties section below.
Security
Apply security configuration described in Security Properties section below.
Tools
Add tool entries to boot picker.
ConsoleAttributes
Sets specific attributes for console. Text renderer supports colour arguments as a sum of foreground and background colors according to UEFI specification. The value of black background and black foreground (0) is reserved.
HibernateMode
Hibernation detection mode. The following modes are supported: • None — Avoid hibernation for your own good. • Auto — Use RTC and NVRAM detection. • RTC — Use RTC detection. • NVRAM — Use NVRAM detection.
HideAuxiliary
Hides auxiliary entries from picker menu by default. An entry is considered auxiliary when at least one of the following applies: • Entry is macOS recovery. • Entry is macOS Time Machine. • Entry is explicitly marked as Auxiliary. • Entry is system (e.g. Clean NVRAM). To see all entries picker menu needs to be reloaded in extended mode by pressing Spacebar key. Hiding auxiliary entries may increase boot performance for multidisk systems.
PickerAttributes
Sets specific attributes for picker. Different pickers may be configured through the attribute mask containing OpenCore-reserved (BIT0~BIT15) and OEM-specific (BIT16~BIT31) values.
PickerAudioAssist
Enable screen reader by default in boot picker. For macOS bootloader screen reader preference is set in preferences.efires archive in isVOEnabled.int32 file and is controlled by the operating system. For OpenCore screen reader support this option is an independent equivalent. Toggling screen reader support in both OpenCore boot picker and macOS bootloader FileVault 2 login window can also be done with Command + F5 key combination. Note: screen reader requires working audio support, see UEFI Audio Properties section for more details.
PollAppleHotKeys
Enable modifier hotkey handling in boot picker. In addition to action hotkeys, which are partially described in PickerMode section and are normally handled by Apple BDS, there exist modifier keys, which are handled by operating system bootloader, namely boot.efi. These keys allow to change operating system behaviour by providing different boot modes. On some firmwares it may be problematic to use modifier keys due to driver incompatibilities. To workaround this problem this option allows registering select hotkeys in a more permissive manner from within boot picker. Such extensions include the support of tapping on keys in addition to holding and pressing Shift along with other keys instead of just Shift alone, which is not detectible on many PS/2 keyboards. This list of known modifier hotkeys includes: • CMD+C+MINUS — disable board compatibility checking. • CMD+K — boot release kernel, similar to kcsuffix=release. • CMD+S — single user mode. • CMD+S+MINUS — disable KASLR slide, requires disabled SIP. • CMD+V — verbose mode. • Shift — safe mode.
ShowPicker
Show simple boot picker to allow boot entry selection.
TakeoffDelay
Delay in microseconds performed before handling picker startup and action hotkeys. Introducing a delay may give extra time to hold the right action hotkey sequence to e.g. boot to recovery mode. On some platforms setting this option to at least 5000-10000 microseconds may be necessary to access action hotkeys at all due to the nature of the keyboard driver.
Timeout
Timeout in seconds in boot picker before automatic booting of the default boot entry. Use 0 to disable timer.
PickerMode
Choose boot picker used for boot management. Picker describes underlying boot management with an optional user interface responsible for handling boot options. The following values are supported: • Builtin — boot management is handled by OpenCore, a simple text only user interface is used. • External — an external boot management protocol is used if available. Otherwise Builtin mode is used. • Apple — Apple boot management is used if available. Otherwise Builtin mode is used. Upon success External mode will entirely disable all boot management in OpenCore except policy enforcement. In Apple mode it may additionally bypass policy enforcement. See OpenCanopy plugin for an example of a custom user interface. OpenCore built-in boot picker contains a set of actions chosen during the boot process. The list of supported actions is similar to Apple BDS and in general can be accessed by holding action hotkeys during boot process. Currently the following actions are considered: • Default — this is the default option, and it lets OpenCore built-in boot picker to loads the default boot option as specified in Startup Disk preference pane. • ShowPicker — this option forces picker to show. Normally it can be achieved by holding OPT key during boot. Setting ShowPicker to true will make ShowPicker the default option. • ResetNvram — this option performs select UEFI variable erase and is normally achieved by holding CMD+OPT+P+R key combination during boot. Another way to erase UEFI variables is to choose Reset NVRAM in the picker. This option requires AllowNvramReset to be set to true. • BootApple — this options performs booting to the first found Apple operating system unless the default chosen operating system is already made by Apple. Hold X key to choose this option. • BootAppleRecovery — this option performs booting to Apple operating system recovery. Either the one related to the default chosen operating system, or first found in case default chosen operating system is not made by Apple or has no recovery. Hold CMD+R key combination to choose this option.
AppleDebug
Enable boot.efi debug log saving to OpenCore log. Note: This option only applies to 10.15.4 and newer.
ApplePanic
Save macOS kernel panic to OpenCore root partition. The file is saved as panic-YYYY-MM-DD-HHMMSS.txt. It is strongly recommended to have keepsyms=1 boot argument to see debug symbols in the panic log. In case it was not present kpdescribe.sh utility (bundled with OpenCore) may be used to partially recover the stacktrace.
DisableWatchDog
Select firmwares may not succeed in quickly booting the operating system, especially in debug mode, which results in watch dog timer aborting the process. This option turns off watch dog timer.
DisplayDelay
Delay in microseconds performed after every printed line visible onscreen (i.e. console).
DisplayLevel
EDK II debug level bitmask (sum) showed onscreen. Unless Target enables console (onscreen) printing, onscreen debug output will not be visible. The following levels are supported (discover more in DebugLib.h): • 0x00000002 (bit 1) — DEBUG_WARN in DEBUG, NOOPT, RELEASE. • 0x00000040 (bit 6) — DEBUG_INFO in DEBUG, NOOPT. • 0x00400000 (bit 22) — DEBUG_VERBOSE in custom builds. • 0x80000000 (bit 31) — DEBUG_ERROR in DEBUG, NOOPT, RELEASE.
SysReport
Produce system report on ESP folder. This option will create a SysReport directory on ESP partition unless it is already present. The directory will contain ACPI and SMBIOS dumps. Note: For security reasons SysReport option is not available in RELEASE builds. Use a DEBUG build if you need this option.
Target
A bitmask (sum) of enabled logging targets. By default all the logging output is hidden, so this option is required to be set when debugging is necessary. The following logging targets are supported: • 0x01 (bit 0) — Enable logging, otherwise all log is discarded. • 0x02 (bit 1) — Enable basic console (onscreen) logging. • 0x04 (bit 2) — Enable logging to Data Hub. • 0x08 (bit 3) — Enable serial port logging. • 0x10 (bit 4) — Enable UEFI variable logging. • 0x20 (bit 5) — Enable non-volatile UEFI variable logging. • 0x40 (bit 6) — Enable logging to file.
AllowNvramReset
Allow CMD+OPT+P+R handling and enable showing NVRAM Reset entry in boot picker.
AllowSetDefault
Allow CTRL+Enter and CTRL+Index handling to set the default boot option in boot picker.
AuthRestart
Enable VirtualSMC-compatible authenticated restart. Authenticated restart is a way to reboot FileVault 2 enabled macOS without entering the password. To perform authenticated restart one can use a dedicated terminal command: sudo fdesetup authrestart. It is also used when installing operating system updates. VirtualSMC performs authenticated restart by saving disk encryption key split in NVRAM and RTC, which despite being removed as soon as OpenCore starts, may be considered a security risk and thus is optional.
BlacklistAppleUpdate
Ignore boot options trying to update Apple peripheral firmware (e.g. MultiUpdater.efi). Note: This option exists due to some operating systems, namely macOS Big Sur, being incapable of disabling firmware updates with the NVRAM variable (run-efi-updater).
BootProtect
Attempt to provide bootloader persistence. Valid values: • None — do nothing. • Bootstrap — create or update top-priority \EFI\OC\Bootstrap\Bootstrap.efi boot option (Boot9696) in UEFI variable storage at bootloader startup. For this option to work RequestBootVarRouting is required to be enabled.
ExposeSensitiveData
Sensitive data exposure bitmask (sum) to operating system. • 0x01 — Expose printable booter path as an UEFI variable. • 0x02 — Expose OpenCore version as an UEFI variable. • 0x04 — Expose OpenCore version in boot picker menu title. • 0x08 — Expose OEM information as a set of UEFI variables.
HaltLevel
EDK II debug level bitmask (sum) causing CPU to halt (stop execution) after obtaining a message of HaltLevel. Possible values match DisplayLevel values.
Vault
Enables vaulting mechanism in OpenCore.  Valid values: • Optional — require nothing, no vault is enforced, insecure. • Basic — require vault.plist file present in OC directory. This provides basic filesystem integrity verification and may protect from unintentional filesystem corruption. • Secure — require vault.sig signature file for vault.plist in OC directory. This includes Basic integrity checking but also attempts to build a trusted bootchain.
ScanPolicy
Define operating system detection policy. This value allows to prevent scanning (and booting) from untrusted source based on a bitmask (sum) of select flags. As it is not possible to reliably detect every file system or device type, this feature cannot be fully relied upon in open environments, and the additional measures are to be applied.
Arguments
Arbitrary ASCII string used as boot arguments (load options) of the specified entry.
Auxiliary
This entry will not be listed by default when HideAuxiliary is set to true.
Comment
Arbitrary ASCII string used to provide human readable reference for the entry. It is implementation defined whether this value is used.
Enabled
This entry will not be listed unless set to true.
Name
Human readable entry name displayed in boot picker.
Path
Entry location depending on entry type. • Entries specify external boot options, and therefore take device paths in Path key. These values are not checked, thus be extremely careful. Example: PciRoot(0x0)/Pci(0x1,0x1)/.../\EFI\COOL.EFI • Tools specify internal boot options, which are part of bootloader vault, and therefore take file paths relative to OC/Tools directory. Example: OpenShell.efi.
NVRAM
Has plist dict type and allows to set volatile UEFI variables commonly referred as NVRAM variables. Refer to man nvram for more details. macOS extensively uses NVRAM variables for OS — Bootloader — Firmware intercommunication, and thus supplying several NVRAM is required for proper macOS functioning.
Add
Sets NVRAM variables from a map (plist dict) of GUIDs to a map (plist dict) of variable names and their values in plist metadata format. GUIDs must be provided in canonic string format in upper or lower case (e.g. 8BE4DF61-93CA-11D2-AA0D-00E098032B8C).
Delete
Removes NVRAM variables from a map (plist dict) of GUIDs to an array (plist array) of variable names in plist string format.
LegacyEnable
Enables loading of NVRAM variable file named nvram.plist from EFI volume root. WARNING: This feature is very dangerous as it passes unprotected data to your firmware variable services. Use it only when no hardware NVRAM implementation is provided by the firmware or it is incompatible.
LegacyOverwrite
Permits overwriting firmware variables from nvram.plist. Note: Only variables accessible from the operating system will be overwritten.
LegacySchema
Allows setting select NVRAM variables from a map (plist dict) of GUIDs to an array (plist array) of variable names in plist string format. WARNING: Choose variables very carefully, as nvram.plist is not vaulted. For instance, do not put boot-args or csr-active-config, as this can bypass SIP.
WriteFlash
Enables writing to flash memory for all added variables. Note: This value is recommended to be enabled on most firmwares, but is left configurable for firmwares that may have issues with NVRAM variable storage garbage collection or alike. To read NVRAM variable value from macOS one could use nvram by concatenating variable GUID and name separated by : symbol. For example, nvram 7C436110-AB2A-4BBB-A880-FE41995C9F82:boot-args. A continuously updated variable list can be found in a corresponding document: NVRAM Variables.
PlatformInfo
Platform information is comprised of several identification fields generated or filled manually to be compatible with macOS services. The base part of the configuration may be obtained from AppleModels, which itself generates a set of interfaces based on a database in YAML format.
Automatic
Generate PlatformInfo based on Generic section instead of using values from DataHub, NVRAM, and SMBIOS sections. Enabling this option is useful when Generic section is flexible enough: • When enabled SMBIOS, DataHub, and PlatformNVRAM data is unused. • When disabled Generic section is unused.
UpdateDataHub
Update Data Hub fields. These fields are read from Generic or DataHub sections depending on Automatic value.
UpdateNVRAM
Update NVRAM fields related to platform information. These fields are read from Generic or PlatformNVRAM sections depending on Automatic value. All the other fields are to be specified with NVRAM section. If UpdateNVRAM is set to false the aforementioned variables can be updated with NVRAM section. If UpdateNVRAM is set to true the behaviour is undefined when any of the fields are present in NVRAM section.
UpdateSMBIOS
Update SMBIOS fields. These fields are read from Generic or SMBIOS sections depending on Automatic value.
UpdateSMBIOSMode
Update SMBIOS fields approach: • TryOverwrite — Overwrite if new size is <= than the page-aligned original and there are no issues with legacy region unlock. Create otherwise. Has issues with some firmwares. • Create — Replace the tables with newly allocated EfiReservedMemoryType at AllocateMaxAddress without any fallbacks. • Overwrite — Overwrite existing gEfiSmbiosTableGuid and gEfiSmbiosTable3Guid data if it fits new size. Abort with unspecified state otherwise. • Custom—WriteSMBIOStables(gEfiSmbios(3)TableGuid)togOcCustomSmbios(3)TableGuidtoworkaround firmwares overwriting SMBIOS contents at ExitBootServices. Otherwise equivalent to Create. Requires patching AppleSmbios.kext and AppleACPIPlatform.kext to read from another GUID: "EB9D2D31" - "EB9D2D35" (in ASCII), done automatically by CustomSMBIOSGuid quirk. Note: A side effect of using Custom approach is making SMBIOS updates exclusive to macOS, avoiding a collission with existing Windows activation and custom OEM software but potentially breaking Apple-specific tools.
Generic
Update all fields. This section is read only when Automatic is active.
DataHub
Update Data Hub fields. This section is read only when Automatic is not active.
PlatformNVRAM
Update platform NVRAM fields. This section is read only when Automatic is not active.
SMBIOS
Update SMBIOS fields. This section is read only when Automatic is not active.
SpoofVendor
Sets SMBIOS vendor fields to Acidanthera. It is dangerous to use Apple in SMBIOS vendor fields for reasons given in SystemManufacturer description. However, certain firmwares may not provide valid values otherwise, which could break some software.
AdviseWindows
Forces Windows support in FirmwareFeatures. Added bits to FirmwareFeatures: • FW_FEATURE_SUPPORTS_CSM_LEGACY_MODE (0x1) - Without this bit it is not possible to reboot to Windows installed on a drive with EFI partition being not the first partition on the disk. • FW_FEATURE_SUPPORTS_UEFI_WINDOWS_BOOT (0x20000000) - Without this bit it is not possible to reboot to Windows installed on a drive with EFI partition being the first partition on the disk.
SystemProductName
Refer to SMBIOS SystemProductName.
SystemSerialNumber
Refer to SMBIOS SystemSerialNumber.
SystemUUID
Refer to SMBIOS SystemUUID.
MLB
Refer to SMBIOS BoardSerialNumber.
ROM
Refer to 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ROM.
PlatformName
Sets name in gEfiMiscSubClassGuid. Value found on Macs is platform in ASCII.
SystemProductName
Sets Model in gEfiMiscSubClassGuid. Value found on Macs is equal to SMBIOS SystemProductName in Unicode.
SystemSerialNumber
Sets SystemSerialNumber in gEfiMiscSubClassGuid. Value found on Macs is equal to SMBIOS SystemSerialNumber in Unicode.
SystemUUID
Sets system-id in gEfiMiscSubClassGuid. Value found on Macs is equal to SMBIOS SystemUUID.
BoardProduct
Sets board-id in gEfiMiscSubClassGuid. Value found on Macs is equal to SMBIOS BoardProduct in ASCII.
BoardRevision
Sets board-rev in gEfiMiscSubClassGuid. Value found on Macs seems to correspond to internal board revision (e.g. 01).
StartupPowerEvents
Sets StartupPowerEvents in gEfiMiscSubClassGuid. Value found on Macs is power management state bitmask, normally 0. Known bits read by X86PlatformPlugin.kext:
InitialTSC
Sets InitialTSC in gEfiProcessorSubClassGuid. Sets initial TSC value, normally 0.
FSBFrequency
Sets FSBFrequency in gEfiProcessorSubClassGuid. Sets CPU FSB frequency. This value equals to CPU nominal frequency divided by CPU maximum bus ratio and is specified in Hz. Refer to MSR_NEHALEM_PLATFORM_INFO (CEh) MSR value to determine maximum bus ratio on modern Intel CPUs. Note: This value is not used on Skylake and newer but is still provided to follow suit.
ARTFrequency
Sets ARTFrequency in gEfiProcessorSubClassGuid. This value contains CPU ART frequency, also known as crystal clock frequency. Its existence is exclusive to Skylake generation and newer. The value is specified in Hz, and is normally 24 MHz for client Intel segment, 25 MHz for server Intel segment, and 19.2 MHz for Intel Atom CPUs. macOS till 10.15 inclusive assumes 24 MHz by default. Note: On Intel Skylake X ART frequency may be a little less (approx. 0.25%) than 24 or 25 MHz due to special EMI-reduction circuit as described in Acidanthera Bugtracker.
DevicePathsSupported
Sets DevicePathsSupported in gEfiMiscSubClassGuid. Must be set to 1 for AppleACPIPlat- form.kext to append SATA device paths to Boot#### and efi-boot-device-data variables. Set to 1 on all modern Macs.
SmcRevision
Sets REV in gEfiMiscSubClassGuid. Custom property read by VirtualSMC or FakeSMC to generate SMC REV key.
SmcBranch
Sets RBr in gEfiMiscSubClassGuid. Custom property read by VirtualSMC or FakeSMC to generate SMC RBr key.
SmcPlatform
Sets RPlt in gEfiMiscSubClassGuid. Custom property read by VirtualSMC or FakeSMC to generate SMC RPlt key.
BID
Specifies the value of NVRAM variable 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_BID.
ROM
Specifies the values of NVRAM variables 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_ROM and 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ROM.
MLB
Specifies the values of NVRAM variables 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_MLB and 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:MLB.
FirmwareFeatures
This variable comes in pair with FirmwareFeaturesMask. Specifies the values of NVRAM variables: • 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:FirmwareFeatures • 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ExtendedFirmwareFeatures
FirmwareFeaturesMask
This variable comes in pair with FirmwareFeatures. Specifies the values of NVRAM variables: • 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:FirmwareFeaturesMask • 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ExtendedFirmwareFeaturesMask
BIOSVendor
BIOS Vendor. All rules of SystemManufacturer do apply.
BIOSVersion
Firmware version. This value gets updated and takes part in update delivery configuration and macOS version compatibility. This value could look like MM71.88Z.0234.B00.1809171422 in older firmwares, and is described in BiosId.h. In newer firmwares it should look like 236.0.0.0.0 or 220.230.16.0.0 (iBridge: 16.16.2542.0.0,0). iBridge version is read from BridgeOSVersion variable, and is only present on macs with T2.
BIOSReleaseDate
Firmware release date. Similar to BIOSVersion. May look like 12/08/2017.
SystemManufacturer
OEM manufacturer of the particular board. Shall not be specified unless strictly required. Should not contain Apple Inc., as this confuses numerous services present in the operating system, such as firmware updates, eficheck, as well as kernel extensions developed in Acidanthera, such as Lilu and its plugins. In addition it will also make some operating systems like Linux unbootable.
SystemProductName
Preferred Mac model used to mark the device as supported by the operating system. This value must be specified by any configuration for later automatic generation of the related values in this and other SMBIOS tables and related configuration parameters. If SystemProductName is not compatible with the target operating system, -no_compat_check boot argument may be used as an override. Note: If SystemProductName is unknown, and related fields are unspecified, default values should be assumed as being set to MacPro6,1 data. The list of known products can be found in AppleModels.
SystemVersion
Product iteration version number. May look like 1.1.
SystemSerialNumber
Product serial number in defined format. Known formats are described in macserial.
SystemUUID
A UUID is an identifier that is designed to be unique across both time and space. It requires no central registration process.
SystemSKUNumber
Mac Board ID (board-id). May look like Mac-7BA5B2D9E42DDD94 or Mac-F221BEC8 in older models. Sometimes it can be just empty.
SystemFamily
System Information (Type 1) — Family Description: Family name. May look like iMac Pro.
BoardManufacturer
Baseboard (or Module) Information (Type 2) - Manufacturer Description: Board manufacturer. All rules of SystemManufacturer do apply.
BoardProduct
Mac Board ID (board-id). May look like Mac-7BA5B2D9E42DDD94 or Mac-F221BEC8 in older models.
BoardVersion
Board version number. Varies, may match SystemProductName or SystemProductVersion.
BoardSerialNumber
Board serial number in defined format. Known formats are described in macserial.
BoardAssetTag
Asset tag number. Varies, may be empty or Type2 - Board Asset Tag.
BoardType
Either 0xA (Motherboard (includes processor, memory, and I/O) or 0xB (Processor/Memory Module), refer to Table 15 – Baseboard: Board Type for more details.
BoardLocationInChassis
Baseboard (or Module) Information (Type 2) — Location in Chassis Description: Varies, may be empty or Part Component.
ChassisManufacturer
System Enclosure or Chassis (Type 3) — Manufacturer Description: Board manufacturer. All rules of SystemManufacturer do apply.
ChassisType
Chassis type, refer to Table 17 — System Enclosure or Chassis Types for more details.
ChassisVersion
System Enclosure or Chassis (Type 3) — Version Description: Should match BoardProduct.
ChassisSerialNumber
System Enclosure or Chassis (Type 3) — Version Description: Should match SystemSerialNumber.
ChassisAssetTag
System Enclosure or Chassis (Type 3) — Asset Tag Number Description: Chassis type name. Varies, could be empty or MacBook-Aluminum.
PlatformFeature
Platform features bitmask. Refer to AppleFeatures.h for more details. Use 0xFFFFFFFF value to not provide this table.
SmcVersion
ASCII string containing SMC version in upper case. Missing on T2 based Macs. Ignored when zero.
FirmwareFeatures
APPLE_SMBIOS_TABLE_TYPE128 - FirmwareFeatures and ExtendedFirmwareFeatures Description: 64-bit firmware features bitmask. Refer to AppleFeatures.h for more details. Lower 32 bits match FirmwareFeatures. Upper 64 bits match ExtendedFirmwareFeatures.
FirmwareFeaturesMask
APPLE_SMBIOS_TABLE_TYPE128 - FirmwareFeaturesMask and ExtendedFirmwareFeaturesMask Description: Supported bits of extended firmware features bitmask. Refer to AppleFeatures.h for more details. Lower 32 bits match FirmwareFeaturesMask. Upper 64 bits match ExtendedFirmwareFeaturesMask.
ProcessorType
APPLE_SMBIOS_TABLE_TYPE131 - ProcessorType Description: Combined of Processor Major and Minor types.
MemoryFormFactor
Memory form factor. On Macs it should be DIMM or SODIMM.
UEFI
UEFI (Unified Extensible Firmware Interface) is a specification that defines a software interface between an operating system and platform firmware. This section allows to load additional UEFI modules and/or apply tweaks for the onboard firmware. To inspect firmware contents, apply modifications and perform upgrades UEFITool and supplementary utilities can be used.
Tools
Standalone tools may help to debug firmware and hardware. Some of the known tools are listed below. While some tools can be launched from within OpenCore many should be run separately either directly or from Shell.
OpenCanopy
OpenCanopy is a graphical OpenCore user interface that runs in External PickerMode and relies on OpenCorePkg OcBootManagementLib similar to the builtin text interface. OpenCanopy requires graphical resources located in Resources directory to run. Sample resources (fonts and images) can be found in OcBinaryData repository. OpenCanopy provides full support for PickerAttributes and offers a configurable builtin icon set. The default chosen icon set depends on the DefaultBackgroundColor variable value. For Light Gray Old icon set will be used, for other colours — the one without a prefix. WARNING: OpenCanopy is currently considered experimental and is not recommended for everyday use. Refer to acidanthera/bugtracker#759 for more details regarding the current limitations.
OpenRuntime
OpenRuntime is an OpenCore plugin implementing OC_FIRMWARE_RUNTIME protocol. This protocol implements multiple features required for OpenCore that are otherwise not possible to implement in OpenCore itself as they are needed to work in runtime, i.e. during operating system functioning. Feature highlights: • NVRAM namespaces, allowing to isolate operating systems from accessing select variables (e.g. RequestBootVarRouting or ProtectSecureBoot). • Read-only and write-only NVRAM variables, enhancing the security of OpenCore, Lilu, and Lilu plugins, like VirtualSMC, which implements AuthRestart support. • NVRAM isolation, allowing to protect all variables from being written from an untrusted operating system (e.g. DisableVariableWrite). • UEFI Runtime Services memory protection management to workaround read-only mapping (e.g. EnableWriteUnprotector). 11.6 Properties
APFS
Provide APFS support as configured in APFS Properties section below.
Audio
Configure audio backend support described in Audio Properties section below. Audio support provides a way for upstream protocols to interact with the selected hardware and audio resources. All audio resources should reside in \EFI\OC\Resources\Audio directory. Currently the only supported audio file format is WAVE PCM. While it is driver-dependent which audio stream format is supported, most common audio cards support 16-bit signed stereo audio at 44100 or 48000 Hz.
ConnectDrivers
Perform UEFI controller connection after driver loading. This option is useful for loading drivers following UEFI driver model as they may not start by themselves. Examples of such drivers are filesystem or audio drivers. While effective, this option may not be necessary for drivers performing automatic connection, and may slightly slowdown the boot. Note: Some firmwares, made by Apple in particular, only connect the boot drive to speedup the boot process. Enable this option to be able to see all the boot options when having multiple drives.
Drivers
Load selected drivers from OC/Drivers directory. Designed to be filled with string filenames meant to be loaded as UEFI drivers.
Input
Apply individual settings designed for input (keyboard and mouse) in Input Properties section below.
Output
Apply individual settings designed for output (text and graphics) in Output Properties section below.
ProtocolOverrides
Force builtin versions of select protocols described in ProtocolOverrides Properties section below. Note: all protocol instances are installed prior to driver loading.
ReservedMemory
Designed to be filled with plist dict values, describing memory areas exquisite to particular firmware and hardware functioning, which should not be used by the operating system. An example of such memory region could be second 256 MB corrupted by Intel HD 3000 or an area with faulty RAM. See ReservedMemory Properties section below.
EnableJumpstart
Load embedded APFS drivers from APFS containers. APFS EFI driver is bundled in all bootable APFS containers. This option performs loading of signed APFS drivers with respect to ScanPolicy. See more details in “EFI Jumpstart” section of Apple File System Reference.
HideVerbose
Hide verbose output from APFS driver. APFS verbose output can be useful for debugging.
JumpstartHotPlug
Load APFS drivers for newly connected devices. Performs APFS driver loading not only at OpenCore startup but also during boot picker. This permits APFS USB hot plug. Disable if not required.
MinDate
Minimal allowed APFS driver date. APFS driver date connects APFS driver with the calendar release date. Older versions of APFS drivers may contain unpatched vulnerabilities, which can be used to inflict harm on your computer. This option permits restricting APFS drivers to only recent releases. • 0 — require the default supported release date of APFS in OpenCore. The default release date will increase with time and thus this setting is recommended. Currently set to 2018/06/21. • -1 — permit any release date to load (strongly discouraged). • Other — use custom minimal APFS release date, e.g. 20200401 for 2020/04/01. APFS release dates can be found in OpenCore boot log and OcApfsLib.
MinVersion
Minimal allowed APFS driver version. APFS driver version connects APFS driver with the macOS release. APFS drivers from older macOS releases will become unsupported and thus may contain unpatched vulnerabilities, which can be used to inflict harm on your computer. This option permits restricting APFS drivers to only modern macOS versions. • 0 — require the default supported version of APFS in OpenCore. The default version will increase with time and thus this setting is recommended. Currently set to the latest point release from High Sierra from App Store (748077008000000). • -1 — permit any version to load (strongly discouraged). • Other — use custom minimal APFS version, e.g. 1412101001000000 from macOS Catalina 10.15.4. APFS versions can be found in OpenCore boot log and OcApfsLib.
AudioCodec
Codec address on the specified audio controller for audio support. Normally this contains first audio codec address on the builtin analog audio controller (HDEF). Audio codec addresses, e.g. 2, can be found in the debug log (marked in bold-italic): OCAU: 1/3 PciRoot(0x0)/Pci(0x1,0x0)/Pci(0x0,0x1)/VenMsg(<redacted>,00000000) (4 outputs) OCAU: 2/3 PciRoot(0x0)/Pci(0x3,0x0)/VenMsg(<redacted>,00000000) (1 outputs) OCAU: 3/3 PciRoot(0x0)/Pci(0x1B,0x0)/VenMsg(<redacted>,02000000) (7 outputs) As an alternative this value can be obtained from IOHDACodecDevice class in I/O Registry containing it in IOHDACodecAddress field.
AudioDevice
Device path of the specified audio controller for audio support. Normally this contains builtin analog audio controller (HDEF) device path, e.g. PciRoot(0x0)/Pci(0x1b,0x0). The list of recognised audio controllers can be found in the debug log (marked in bold-italic): OCAU: 1/3 PciRoot(0x0)/Pci(0x1,0x0)/Pci(0x0,0x1)/VenMsg(<redacted>,00000000) (4 outputs) OCAU: 2/3 PciRoot(0x0)/Pci(0x3,0x0)/VenMsg(<redacted>,00000000) (1 outputs) OCAU: 3/3 PciRoot(0x0)/Pci(0x1B,0x0)/VenMsg(<redacted>,02000000) (7 outputs) As an alternative gfxutil -f HDEF command can be used in macOS. Specifying empty device path will result in the first available audio controller to be used.
AudioOut
Index of the output port of the specified codec starting from 0. Normally this contains the index of the green out of the builtin analog audio controller (HDEF). The number of output nodes (N) in the debug log (marked in bold-italic): OCAU: 1/3 PciRoot(0x0)/Pci(0x1,0x0)/Pci(0x0,0x1)/VenMsg(<redacted>,00000000) (4 outputs) OCAU: 2/3 PciRoot(0x0)/Pci(0x3,0x0)/VenMsg(<redacted>,00000000) (1 outputs) OCAU: 3/3 PciRoot(0x0)/Pci(0x1B,0x0)/VenMsg(<redacted>,02000000) (7 outputs) The quickest way to find the right port is to bruteforce the values from 0 to N - 1.
AudioSupport
Activate audio support by connecting to a backend driver. Enabling this setting routes audio playback from builtin protocols to a dedicated audio port (AudioOut) of the specified codec (AudioCodec) located on the audio controller (AudioDevice).
MinimumVolume
Minimal heard volume level from 0 to 100. Screen reader will use this volume level, when the calculated volume level is less than MinimumVolume. Boot chime sound will not play if the calculated volume level is less than MinimumVolume.
PlayChime
Play chime sound at startup. Enabling this setting plays boot chime through builtin audio support. Volume level is determined by MinimumVolume and VolumeAmplifier settings and SystemAudioVolume NVRAM variable. Note: this setting is separate from StartupMute NVRAM variable to avoid conflicts when the firmware is able to play boot chime.
VolumeAmplifier
Multiplication coefficient for system volume to raw volume linear translation from 0 to 1000. Volume level range read from SystemAudioVolume varies depending on the codec. To transform read value in [0, 127] range into raw volume range [0, 100] the read value is scaled to VolumeAmplifier percents: RawVolume = MIN(SystemAudioV olume ∗ V olumeAmplifier,100) 100 Note: the transformation used in macOS is not linear, but it is very close and this nuance is thus ignored. 11.9 Input Properties
KeyFiltering
Enable keyboard input sanity checking. Apparently some boards like GA Z77P-D3 may return uninitialised data in EFI_INPUT_KEY with all input protocols. This option discards keys that are neither ASCII, nor are defined in the UEFI specification (see tables 107 and 108 in version 2.8).
KeyForgetThreshold
Remove key unless it was submitted during this timeout in milliseconds. AppleKeyMapAggregator protocol is supposed to contain a fixed length buffer of currently pressed keys. However, the majority of the drivers only report key presses as interrupts and pressing and holding the key on the keyboard results in subsequent submissions of this key with some defined time interval. As a result we use a timeout to remove once pressed keys from the buffer once the timeout expires and no new submission of this key happened. This option allows to set this timeout based on your platform. The recommended value that works on the majority of the platforms is 5 milliseconds. For reference, holding one key on VMware will repeat it roughly every 2 milliseconds and the same value for APTIO V is 3-4 milliseconds. Thus it is possible to set a slightly lower value on faster platforms and slightly higher value on slower platforms for more responsive input.
KeyMergeThreshold
Assume simultaneous combination for keys submitted within this timeout in milliseconds. Similarly to KeyForgetThreshold, this option works around the sequential nature of key submission. To be able to recognise simultaneously pressed keys in the situation when all keys arrive sequentially, we are required to set a timeout within which we assume the keys were pressed together. Holding multiple keys results in reports every 2 and 1 milliseconds for VMware and APTIO V respectively. Pressing keys one after the other results in delays of at least 6 and 10 milliseconds for the same platforms. The recommended value for this option is 2 milliseconds, but it may be decreased for faster platforms and increased for slower.
KeySupport
Enable internal keyboard input translation to AppleKeyMapAggregator protocol. This option activates the internal keyboard interceptor driver, based on AppleGenericInput aka (AptioInputFix), to fill AppleKeyMapAggregator database for input functioning. In case a separate driver is used, such as OpenUsbKbDxe, this option should never be enabled.
KeySupportMode
Set internal keyboard input translation to AppleKeyMapAggregator protocol mode. • Auto — Performs automatic choice as available with the following preference: AMI, V2, V1. • V1 — Uses UEFI standard legacy input protocol EFI_SIMPLE_TEXT_INPUT_PROTOCOL. • V2 — Uses UEFI standard modern input protocol EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL. • AMI — Uses APTIO input protocol AMI_EFIKEYCODE_PROTOCOL. Note: Currently V1, V2, and AMI unlike Auto only do filtering of the particular specified protocol. This may change in the future versions.
KeySwap
Swap Command and Option keys during submission. This option may be useful for keyboard layouts with Option key situated to the right of Command key.
PointerSupport
Enable internal pointer driver. This option implements standard UEFI pointer protocol (EFI_SIMPLE_POINTER_PROTOCOL) through select OEM protocols. The option may be useful on Z87 ASUS boards, where EFI_SIMPLE_POINTER_PROTOCOL is broken.
PointerSupportMode
Set OEM protocol used for internal pointer driver. Currently the only supported variant is ASUS, using specialised protocol available on select Z87 and Z97 ASUS boards. More details can be found in LongSoft/UefiTool#116.
TimerResolution
Set architecture timer resolution. This option allows to update firmware architecture timer period with the specified value in 100 nanosecond units. Setting a lower value generally improves performance and responsiveness of the interface and input handling. The recommended value is 50000 (5 milliseconds) or slightly higher. Select ASUS Z87 boards use 60000 for the interface. Apple boards use 100000. You may leave it as 0 in case there are issues.
TextRenderer
Chooses renderer for text going through standard console output. Currently two renderers are supported: Builtin and System. System renderer uses firmware services for text rendering. Builtin bypassing firmware services and performs text rendering on its own. Different renderers support a different set of options. It is recommended to use Builtin renderer, as it supports HiDPI mode and uses full screen resolution. UEFI firmwares generally support ConsoleControl with two rendering modes: Graphics and Text. Some firmwares do not support ConsoleControl and rendering modes. OpenCore and macOS expect text to only be shown in Graphics mode and graphics to be drawn in any mode. Since this is not required by UEFI specification, exact behaviour varies. Valid values are combinations of text renderer and rendering mode: • BuiltinGraphics — Switch to Graphics mode and use Builtin renderer with custom ConsoleControl. • SystemGraphics — Switch to Graphics mode and use System renderer with custom ConsoleControl. • SystemText — Switch to Text mode and use System renderer with custom ConsoleControl. • SystemGeneric — Use System renderer with system ConsoleControl assuming it behaves correctly .The use of BuiltinGraphics is generally straightforward. For most platforms it is necessary to enable ProvideConsoleGop, set Resolution to Max. The use of System protocols is more complicated. In general the preferred setting is SystemGraphics or SystemText. Enabling ProvideConsoleGop, setting Resolution to Max, enabling ReplaceTabWithSpace is useful on almost all platforms. SanitiseClearScreen, IgnoreTextInGraphics, and ClearScreenOnModeSwitch are more specific, and their use depends on the firmware. Note: Some Macs, namely MacPro5,1, may have broken console output with newer GPUs, and thus only BuiltinGraphics may work for them.
ConsoleMode
Sets console output mode as specified with the WxH (e.g. 80x24) formatted string. Set to empty string not to change console mode. Set to Max to try to use largest available console mode. Currently Builtin text renderer supports only one console mode, so this option is ignored. Note: This field is best to be left empty on most firmwares.
Resolution
Sets console output screen resolution. • Set to WxH@Bpp (e.g. 1920x1080@32) or WxH (e.g. 1920x1080) formatted string to request custom resolution from GOP if available. • Set to empty string not to change screen resolution. • Set to Max to try to use largest available screen resolution. On HiDPI screens APPLE_VENDOR_VARIABLE_GUID UIScale NVRAM variable may need to be set to 02 to enable HiDPI scaling in Builtin text renderer, FileVault 2 UEFI password interface, and boot screen logo. Refer to Recommended Variables section for more details. Note: This will fail when console handle has no GOP protocol. When the firmware does not provide it, it can be added with ProvideConsoleGop set to true.
ClearScreenOnModeSwitch
Some firmwares clear only part of screen when switching from graphics to text mode, leaving a fragment of previously drawn image visible. This option fills the entire graphics screen with black color before switching to text mode. Note: This option only applies to System renderer.
DirectGopRendering
Use builtin graphics output protocol renderer for console. On some firmwares this may provide better performance or even fix rendering issues, like on MacPro5,1. However, it is recommended not to use this option unless there is an obvious benefit as it may even result in slower scrolling.
IgnoreTextInGraphics
Select firmwares output text onscreen in both graphics and text mode. This is normally unexpected, because random text may appear over graphical images and cause UI corruption. Setting this option to true will discard all text output when console control is in mode different from Text. Note: This option only applies to System renderer.
ReplaceTabWithSpace
Some firmwares do not print tab characters or even everything that follows them, causing difficulties or inability to use the UEFI Shell builtin text editor to edit property lists and other documents. This option makes the console output spaces instead of tabs. Note: This option only applies to System renderer.
ProvideConsoleGop
Ensure GOP (Graphics Output Protocol) on console handle. macOS bootloader requires GOP to be present on console handle, yet the exact location of GOP is not covered by the UEFI specification. This option will ensure GOP is installed on console handle if it is present. Note: This option will also replace broken GOP protocol on console handle, which may be the case on MacPro5,1 with newer GPUs.
ReconnectOnResChange
Reconnect console controllers after changing screen resolution. On some firmwares when screen resolution is changed via GOP, it is required to reconnect the controllers, which produce the console protocols (simple text out). Otherwise they will not produce text based on the new resolution. Note: On several boards this logic may result in black screen when launching OpenCore from Shell and thus it is optional. In versions prior to 0.5.2 this option was mandatory and not configurable. Please do not use this unless required.
SanitiseClearScreen
Some firmwares reset screen resolution to a failsafe value (like 1024x768) on the attempts to clear screen contents when large display (e.g. 2K or 4K) is used. This option attempts to apply a workaround. Note: This option only applies to System renderer. On all known affected systems ConsoleMode had to be set to empty string for this to work.
AppleAudio
Reinstalls Apple audio protocols with builtin versions. Apple audio protocols allow macOS bootloader and OpenCore to play sounds and signals for screen reading or audible error reporting. Supported protocols are beep generation and VoiceOver. VoiceOver protocol is specific to Gibraltar machines (T2) and is not supported before macOS High Sierra (10.13). Instead older macOS versions use AppleHDA protocol, which is currently not implemented. Only one set of audio protocols can be available at a time, so in order to get audio playback in OpenCore user interface on Mac system implementing some of these protocols this setting should be enabled. Note: Backend audio driver needs to be configured in UEFI Audio section for these protocols to be able to stream audio.
AppleBootPolicy
Reinstalls Apple Boot Policy protocol with a builtin version. This may be used to ensure APFS compatibility on VMs or legacy Macs. Note: Some Macs, namely MacPro5,1, do have APFS compatibility, but their Apple Boot Policy protocol contains recovery detection issues, thus using this option is advised on them as well.
AppleDebugLog
Reinstalls Apple Debug Log protocol with a builtin version.
AppleEvent
Reinstalls Apple Event protocol with a builtin version. This may be used to ensure File Vault 2 compatibility on VMs or legacy Macs.
AppleImageConversion
Reinstalls Apple Image Conversion protocol with a builtin version.
AppleKeyMap
Reinstalls Apple Key Map protocols with builtin versions.
AppleRtcRam
Reinstalls Apple RTC RAM protocol with builtin version. Note: Builtin version of Apple RTC RAM protocol may filter out I/O attempts to select RTC memory addresses. The list of addresses can be specified in 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:rtc-blacklist variable as a data array.
AppleSmcIo
Reinstalls Apple SMC I/O protocol with a builtin version. This protocol replaces legacy VirtualSmc UEFI driver, and is compatible with any SMC kernel extension. However, in case FakeSMC kernel extension is used, manual NVRAM key variable addition may be needed.
AppleUserInterfaceTheme
Reinstalls Apple User Interface Theme protocol with a builtin version.
DataHub
Reinstalls Data Hub protocol with a builtin version. This will delete all previous properties if the protocol was already installed.
DeviceProperties
Reinstalls Device Property protocol with a builtin version. This will delete all previous properties if it was already installed. This may be used to ensure full compatibility on VMs or legacy Macs.
FirmwareVolume
Forcibly wraps Firmware Volume protocols or installs new to support custom cursor images for File Vault 2. Should be set to true to ensure File Vault 2 compatibility on everything but VMs and legacy Macs. Note: Several virtual machines including VMware may have corrupted cursor image in HiDPI mode and thus may also require this setting to be enabled.
HashServices
Forcibly reinstalls Hash Services protocols with builtin versions. Should be set to true to ensure File Vault 2 compatibility on platforms providing broken SHA-1 hashing. Can be diagnosed by invalid cursor size with UIScale set to 02, in general platforms prior to APTIO V (Haswell and older) are affected.
OSInfo
Forcibly reinstalls OS Info protocol with builtin versions. This protocol is generally used to receive notifications from macOS bootloader, by the firmware or by other applications.
UnicodeCollation
Forcibly reinstalls unicode collation services with builtin version. Should be set to true to ensure UEFI Shell compatibility on platforms providing broken unicode collation. In general legacy Insyde and APTIO platforms on Ivy Bridge and earlier are affected.
DeduplicateBootOrder
Remove duplicate entries in BootOrder variable in EFI_GLOBAL_VARIABLE_GUID. This quirk requires RequestBootVarRouting to be enabled and therefore OC_FIRMWARE_RUNTIME protocol imple- mented in OpenRuntime.efi. By redirecting Boot prefixed variables to a separate GUID namespace with the help of RequestBootVarRouting quirk we achieve multiple goals: • Operating systems are jailed and only controlled by OpenCore boot environment to enhance security. • Operating systems do not mess with OpenCore boot priority, and guarantee fluent updates and hibernation wakes for cases that require reboots with OpenCore in the middle. • Potentially incompatible boot entries, such as macOS entries, are not deleted or anyhow corrupted. However, some firmwares do their own boot option scanning upon startup by checking file presence on the available disks. Quite often this scanning includes non-standard locations, such as Windows Bootloader paths. Normally it is not an issue, but some firmwares, ASUS firmwares on APTIO V in particular, have bugs. For them scanning is implemented improperly, and firmware preferences may get accidentally corrupted due to BootOrder entry duplication (each option will be added twice) making it impossible to boot without cleaning NVRAM. To trigger the bug one should have some valid boot options (e.g. OpenCore) and then install Windows with RequestBootVarRouting enabled. As Windows bootloader option will not be created by Windows installer, the firmware will attempt to create it itself, and then corrupt its boot option list. This quirk removes all duplicates in BootOrder variable attempting to resolve the consequences of the bugs upon OpenCore loading. It is recommended to use this key along with BootProtect option.
ExitBootServicesDelay
Adds delay in microseconds after EXIT_BOOT_SERVICES event. This is a very ugly quirk to circumvent "Still waiting for root device" message on select APTIO IV firmwares, namely ASUS Z87-Pro, when using FileVault 2 in particular. It seems that for some reason they execute code in parallel to EXIT_BOOT_SERVICES, which results in SATA controller being inaccessible from macOS. A better approach should be found in some future. Expect 3-5 seconds to be enough in case the quirk is needed.
IgnoreInvalidFlexRatio
Select firmwares, namely APTIO IV, may contain invalid values in MSR_FLEX_RATIO (0x194) MSR register. These values may cause macOS boot failure on Intel platforms. Note: While the option is not supposed to induce harm on unaffected firmwares, its usage is not recommended when it is not required.
ReleaseUsbOwnership
Attempt to detach USB controller ownership from the firmware driver. While most firmwares manage to properly do that, or at least have an option for, select firmwares do not. As a result, operating system may freeze upon boot. Not recommended unless required.
RequestBootVarRouting
Request redirect of all Boot prefixed variables from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. This quirk requires OC_FIRMWARE_RUNTIME protocol implemented in OpenRuntime.efi. The quirk lets default boot entry preservation at times when firmwares delete incompatible boot entries. Simply said, you are required to enable this quirk to be able to reliably use Startup Disk preference pane in a firmware that is not compatible with macOS boot entries by design.
TscSyncTimeout
Attempts to perform TSC synchronisation with a specified timeout. The primary purpose of this quirk is to enable early bootstrap TSC synchronisation on some server and laptop models when running a debug XNU kernel. For the debug kernel the TSC needs to be kept in sync across the cores before any kext could kick in rendering all other solutions problematic. The timeout is specified in microseconds and depends on the amount of cores present on the platform, the recommended starting value is 500000. This is an experimental quirk, which should only be used for the aforementioned problem. In all other cases the quirk may render the operating system unstable and is not recommended. The recommended solution in the other cases is to install a kernel driver like VoodooTSCSync, TSCAdjustReset, or CpuTscSync (a more specialised variant of VoodooTSCSync for newer laptops). Note: The reason this quirk cannot replace the kernel driver is because it cannot operate in ACPI S3 mode (sleep wake) and because the UEFI firmwares provide very limited multicore support preventing the precise update of the MSR registers.
UnblockFsConnect
Some firmwares block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Note: The quirk is mostly relevant for select HP laptops with no drives listed.
Address
Start address of the reserved memory region, which should be allocated as reserved effectively marking the memory of this type inaccessible to the operating system. The addresses written here must be part of the memory map, have EfiConventionalMemory type, and page-aligned (4 KBs).
Size
Size of the reserved memory region, must be page-aligned (4 KBs).
ProvideMaxSlide
Provide maximum KASLR slide when higher ones are unavailable. This option overrides the maximum slide of 255 by a user specified value between 1 and 254 inclusive when ProvideCustomSlide is enabled. It is believed that modern firmwares allocate pool memory from top to bottom, effectively resulting in free memory at the time of slide scanning being later used as temporary memory during kernel loading. In case those memory are unavailable, this option can stop evaluating higher slides.
GlobalConnect
Perform full device connection during APFS loading. Instead of partition handle connection normally used for APFS driver loading every handle is connected recursively. This may take more time than usual but can be the only way to access APFS partitions on some firmwares like those found on older HP laptops.
UgaPassThrough
Some firmwares do not implement legacy UGA protocol, but it may be required for screen output by older EFI applications like EfiBoot from 10.4.
AppleFramebufferInfo
Reinstalls Apple Framebuffer Info protocol with a builtin version. This may be used to override framebuffer information on VMs or legacy Macs to improve compatibility with legacy EfiBoot like the one in macOS 10.4.
SerialInit
Perform serial port initialisation. This option will perform serial port initialisation within OpenCore prior to enabling (any) debug logging. Serial port configuration is defined via PCDs at compile time in GUID. Default values as found in MdeModulePkg.dec are as follows: PcdSerialBaudRate} --- Baud rate: 115200 PcdSerialLineControl --- Line control: no parity, 8 data bits, 1 stop bit.
DmgLoading
Attempt to provide bootloader persistence. Valid values: Disabled --- loading DMG images will fail. Signed --- only Apple-signed DMG images will load. Any --- any DMG images will mount as normal filesystems.
ApECID
Apple Enclave Identifier. Setting this value to any (random) non-zero 64-bit integer will allow using personalised Apple Secure Boot identifiers. This value set and SecureBootModel valid and not Disabled is equivalent to achieve Full Security of Apple Secure Boot. Note: You will have to reinstall the operating system or use the recovery after setting this value to non-zero.
SecureBootModel
Apple Secure Boot hardware model. Defines Apple Secure Boot hardware model and policy. Specifying this value defines which operating systems will be bootable. Operating systems shipped before the specified model was released will not boot. Valid values: Default --- Recent available model, currently set to j215 Disabled --- No model, Secure Boot will be disabled. j137 --- iMacPro1,1 (December 2017) j680 --- MacBookPro15,1 (July 2018) j132 --- MacBookPro15,2 (July 2018) j174 --- Macmini8,1 (October 2018) j140k --- MacBookAir8,1 (October 2018) j780 --- MacBookPro15,3 (May 2019) j213 --- MacBookPro15,4 (July 2019) j140a --- MacBookAir8,2 (July 2019) j152f --- MacBookPro16,1 (November 2019) j160 --- MacPro7,1 (December 2019) j230k --- MacBookAir9,1 (March 2020) j214k --- MacBookPro16,2 (May 2020) j223 --- MacBookPro16,3 (May 2020) j215 --- MacBookPro16,4 (June 2020) j185 --- iMac20,1 (August 2020) j185f --- iMac20,2 (August 2020)
AppleImg4Verification
Reinstalls Apple IMG4 Verification protocol with a builtin version. This protocol is used to verify \texttt{im4m} manifest files used by Apple Secure Boot.
AppleSecureBoot
Reinstalls Apple Secure Boot protocol with a builtin version.
Arch
Architecture (Any, i386, x86_64)
Scheme
Define kernelspace operation mode via parameters
FuzzyMatch
Use kernelcache with different checksums when available. On macOS 10.6 and earlier kernelcache filename has a checksum, which essentially is adler32 from SMBIOS product name and EfiBoot device path. On certain firmwares EfiBoot device path differs between UEFI and macOS due to ACPI or hardware specifics, rendering kernelcache checksum as always different. This setting allows matching the latest kernelcache with a suitable architecture when the kernelcache without suffix is unavailable, improving macOS 10.6 boot performance on several platforms.
KernelArch
Prefer specified kernel architecture (Auto, i386, x86_64) when available. On macOS 10.7 and earlier XNU kernel may not boot with the usual x86_64 architecture, and the exact choice depends on many factors including boot arguments, SMBIOS, and operating system type. This setting will use the specified architecture to boot macOS when it is supported by the macOS and the configuration. Below is the algorithm determining the kernel architecture. See Configuration.pdf for more
KernelCache
Prefer specified kernel cache type (Auto, Cacheless, Mkext, Prelinked) when available. Different variants of macOS support different kernel caching variants designed to improve boot performance. This setting allows to prevent using faster kernel caching variants if slower variants are available for debugging and stability reasons. I.e. by specifying Mkext one will disable Prelinked for e.g. 10.6 but not 10.7 See Configuration.pdf
EnablePassword
Enable password protection to allow sensitive operations. Password protection ensures that sensitive operations like booting a non-default operating system (e.g. macOS recovery or a tool), resetting NVRAM storage, trying to boot into a non-default mode (e.g. verbose mode or safe mode) are not allowed without explicit user authentication by a custom password. Currently password and salt are hashed with 5000000 iterations of SHA-512. Note: This functionality is currently in development and is not ready for daily usage.
PasswordHash
Password hash used when EnabledPassword is set
PasswordSalt
Password salt used when EnablePassword is set
DisableLinkeditJettison
Disables LINKEDIT jettison code. This option lets Lilu.kext and possibly some others function in macOS Big Sur with best performance without keepsyms=1 boot argument
ProcessorType
Refer to SMBIOS - ProcessorType - Combined of Processor Major and Minor types
SystemMemoryStatus
Indicates whether system memory is upgradable in PlatformFeature This controls the visibility of the Memory tab in About This Mac.  Valid values:  Auto --- use the original PlatformFeature value.  Upgradable --- explicitly unset PT\_FEATURE\_HAS\_SOLDERED\_SYSTEM\_MEMORY 0x2 in PlatformFeature.   Soldered --- explicitly set PT\_FEATURE\_HAS\_SOLDERED\_SYSTEM\_MEMORY in PlatformFeature.    Note: On certain Mac models (namely MacBookPro10,x and any MacBookAir), SPMemoryReporter.spreporter will ignore PT\_FEATURE\_HAS\_SOLDERED\_SYSTEM\_MEMORY and assume that system memory is non-upgradable
ExtendBTFeatureFlags
Set FeatureFlags to 0x0F for full functionality of Bluetooth, including Continuity. Note: This option is a substitution for BT4LEContinuityFixup.kext, which does not function properly due to late patching progress.
LegacyCommpage
Replaces the default 64-bit commpage bcopy implementation with one that does not require SSSE3, useful for legacy platforms. This prevents a commpage no match for last panic due to no available 64-bit bcopy functions that do not require SSSE3
CustomMemory
Use custom memory configuration defined in the Memory section. This completely replaces any existing memory configuration in SMBIOS, and is only active when UpdateSMBIOS is set to true.
ForceResolution
Forces Resolution to be set in cases where the desired resolution is not available by default, such as on legacy Intel GMA and first generation Intel HD Graphics (Ironlake/Arrandale). Setting Resolution toi Max will try to pull the largest available resolution from the connected display's EDID. Note: This option depends on the OC\_FORCE\_RESOLUTION\_PROTOCOL protocol being present. This protocol is currently only supported by OpenDuetPkg. The OpenDuetPkg implementation currently only supports Intel iGPUs.
ForceSecureBootScheme
Force x86 scheme for IMG4 verification. Note: This option is required on virtual machines when using SecureBootModel different from x86legacy.
RealPath
Pass full path to the tool when launching. Passing tool directory may be unsafe for tool accidentally trying to access files without checking their integrity and thus should generally be disabled. Reason to enable this property may include cases where tools cannot work without external files or may need them for better function (e.g. memtest86 for logging and configuration or Shell for automatic script execution). Note: This property is only valid for Tools. For Entries this property cannot be specified and is always true
TextMode
Run the entry in text mode instead of graphics mode. This setting may be benefitial to some older tools that require text output. By default all the tools are launched in graphics mode.
AllowRelocationBlock
Allows booting macOS through a relocation block. Relocation block is a scratch buffer allocated in lower 4 GB to be used for loading the kernel and related structures by EfiBoot on firmwares where lower memory is otherwise occupied by the (assumed to be) non-runtime data. Right before kernel startup the relocation block is copied back to lower addresses. Similarly all the other addresses pointing to relocation block are also carefully adjusted.
PickerVariant
Choose specific icon set used for boot management. Auto --- Automatically select one set of icons based on DefaultBackground colour. Default --- Normal icon set (without prefix). Old --- Vintage icon set (Old filename prefix). Modern --- Nouveau icon set (Modern filename prefix). Other value --- Custom icon set if supported by the resources.
MaxBIOSVersion
Sets BIOSVersion to 9999.999.999.999.999, recommended for legacy Macs when using Automatic PlatformInfo to avoid BIOS updates in unofficially supported macOS versions.
SetApfsTrimTimeout
Set trim timeout in microseconds for APFS filesystems on SSDs.  Depending on the SSD controller trim procedure may take considerable amount of time, causing noticeable boot slowdown as this is when the APFS driver executes the trim operation. If the SSD supports over-provisioning or there exists a dedicated unused partition that can be used to reserve blocks, trim operation may not be necessary. On the other side if the SSD is slow, the default timeout (equals to 9.999999 seconds) may not be enough. See more details in this https://interface31.ru/tech_it/2015/04/mozhno-li-effektivno-ispolzovat-ssd-bez-podderzhki-trim. Set this value to 4294967295 for the maximum timeout to guarantee trim success or to 999 to essentially disable trim.
DisableSecurityPolicy
Disable platform security policy. Note: This setting disables various security features of the firmware, defeating the purpose of any kind of Secure Boot. Do NOT enable if you use UEFI Secure Boot.
LauncherOption
Register launcher option in firmware preferences for persistence. Valid values: • Disabled — do nothing. • Full — create or update top-priority boot option in UEFI variable storage at bootloader startup. For this option to work RequestBootVarRouting is required to be enabled. • Short — create a short boot option instead of a complete one. This variant is useful for some older firmwares, Insyde in particular, but possibly others, which cannot handle full device paths. This option provides integration with third-party operating system installation and upgrade at the times they overwrite \EFI\BOOT\BOOTx64.efi file. By creating a custom option in this file path becomes no longer used for bootstrapping OpenCore. The path used for bootstrapping is specified in LauncherPath option.
LauncherPath
Launch path for LauncherOption. Default stays for launched OpenCore.efi, any other path, e.g. \EFI\Launcher.efi, can be used to provide custom loaders, which are supposed to load OpenCore.efi themselves.
UseRawUuidEncoding
Use raw encoding for SMBIOS UUIDs. OpenCore always sets a recent SMBIOS version (currently 3.2) when generating the modified DMI tables. If UseRawUuidEncoding is enabled, then Big Endian format is used to store the SystemUUID data. Otherwise Little Endian is used.
ResetTrafficClass
Set HDA Traffic Class Select Register to TC0. AppleHDA kext will function correctly only if TCSEL register is configured to use TC0 traffic class. Refer to Intel I/O Controller Hub 9 (ICH9) Family Datasheet (or any other ICH datasheet) for more details about this register. Note: This option is independent from AudioSupport. If AppleALC is used it is preferred to use AppleALC alctsel property instead.
GopPassThrough
Provide GOP protocol instances on top of UGA protocol instances. This option provides the GOP protocol via a UGA-based proxy for firmware that do not implement the protocol. Note: This option requires ProvideConsoleGop to be enabled.
ActivateHpetSupport
Activates HPET support. Older boards like ICH6 may not always have HPET setting in the firmware preferences, this option tries to force enable it.
ForceBooterSignature
Set macOS boot-signature to OpenCore launcher. Booter signature, essentially a SHA-1 hash of the loaded image, is used by Mac EFIto verify the authenticity of the bootloader when waking from hibernation. This option forces macOS to use OpenCore launcher SHA-1 hash as a booter signature to let OpenCore shim hibernation wake on Mac EFI firmware. Note: OpenCore launcher path is determined from LauncherPath property.
